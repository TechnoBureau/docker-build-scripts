#!/bin/bash

set -euo pipefail
#set -x

# Unified script: optional release version (default 9). Accepts:
#   install_packages_chroot 10 pkg1 pkg2 ...
#   install_packages_chroot -r 10 pkg1 ...
#   install_packages_chroot --releasever=10 pkg1 ...
#   install_packages_chroot --exclude="pkg1,pkg2" pkg3 pkg4 ...
#   DISALLOW_PACKAGES="pkg1,pkg2" install_packages_chroot pkg3 pkg4 ...
# If no version provided, defaults to 9.

releasever=9
extra_disallow=""

# Parse optional release version and disallow packages
while [ "$#" -gt 0 ]; do
	case "$1" in
		--releasever=*)
			releasever="${1#*=}"
			shift
			;;
		-r|--releasever)
			if [ "$#" -lt 2 ]; then
				echo "Missing value for $1" >&2
				exit 2
			fi
			releasever="$2"
			shift 2
			;;
		--exclude=*)
			extra_disallow="${1#*=}"
			shift
			;;
		-e|--exclude)
			if [ "$#" -lt 2 ]; then
				echo "Missing value for $1" >&2
				exit 2
			fi
			extra_disallow="$2"
			shift 2
			;;
		[0-9]*)
			# first arg is numeric -> treat as releasever
			releasever="$1"
			shift
			;;
		*)
			# end of options, remaining are package names
			break
			;;
	esac
done

# Also support DISALLOW_PACKAGES environment variable
if [ -n "${DISALLOW_PACKAGES:-}" ]; then
	if [ -n "$extra_disallow" ]; then
		extra_disallow="${extra_disallow},${DISALLOW_PACKAGES}"
	else
		extra_disallow="${DISALLOW_PACKAGES}"
	fi
fi

dir="/tmp/null"
rm -rf "$dir"
mkdir "$dir"
cd "$dir"

# Add all remaining arguments as the initial core packages
printf '%s\n' "$@" > keep
# Packages required for a shell environment
cat >>keep <<'EOF'
glibc
glibc-minimal-langpack
filesystem
setup
openssl-libs
ca-certificates
libgcc
EOF

# Packages that are not needed in the chroot environment.  Disallow list to block certain packages and their dependencies from being installed and very careful to add into this list where it will find those dependencies as well to be removed.

cat >disallow <<'EOF'
alsa-lib
atk
authselect
avahi-libs
bash-completion
bc
bind-utils
bzip2
chkconfig
cpio
cracklib
cronie
cups-libs
curl
dbus
device-mapper
diffutils
dracut
e2fsprogs
ed
elfutils
file
findutils
fontconfig
freetype
gawk
gdbm
gdb
glibc-all-langpacks
glibc-langpack-en
gnupg2
gnutls
gpgme
grep
groff-base
gzip
harfbuzz
hostname
info
iproute
iputils
kbd
kmod
krb5-libs
less
libX11
libXau
libXcomposite
libXcursor
libXdamage
libXext
libXfixes
libXft
libXi
libXinerama
libXrandr
libXrender
libXtst
libassuan
libcap
libdrm
libgcrypt
libglvnd
libidn2
libmount
libpng
libpwquality
libselinux-utils
libstdc++
libtasn1
libunistring
libuser
libwayland-client
libxcb
libxml2
libxslt
lz4
mesa*
ncurses
net-tools
nettle
NetworkManager
openssh
openssh-clients
openssl
p11-kit
pam
passwd
perl
pkgconfig
platform-python
platform-python-pip
platform-python-setuptools
policycoreutils
popt
procps-ng
psmisc
python3
python3-libs
python3-pip
python3-pip-wheel
python3-setuptools
python3-setuptools-wheel
readline
redhat-logos-httpd
rootfiles
rpm
sed
shadow-utils
shared-mime-info
sqlite-libs
sudo
systemd
systemd-libs
systemd-pam
tar
tzdata
udev
util-linux
vim-minimal
wget
which
xz
xz-libs
yum
alternatives
coreutils
EOF

# Add additional disallow packages from command line or environment variable
if [ -n "$extra_disallow" ]; then
	echo "==> Adding additional disallow packages: $extra_disallow" >&2
	# Convert comma-separated list to newlines and append to disallow file
	echo "$extra_disallow" | tr ',' '\n' >> disallow
fi

sort -u keep -o keep

echo "==> Installing packages into chroot (releasever=$releasever)" >&2

set -x
# Install requirements for this script (xargs and cmp)
dnf install -y findutils diffutils
# Install core packages to chroot
rootfs="$(realpath rootfs)"
mkdir -p "$rootfs"
<keep xargs dnf install -y --installroot "$rootfs" --releasever "$releasever" --setopt install_weak_deps=false --nodocs
dnf --installroot "$rootfs" clean all
rm -rf "$rootfs"/var/cache/* "$rootfs"/var/log/dnf* "$rootfs"/var/log/yum.*
{ set +x; } 2>/dev/null

echo "==> Building dependency tree" >&2
# Loop until we have the full dependency tree (no new packages found)
touch old
while ! cmp -s keep old
do
    # 1. Get requirement names (not quite the same as package names)
    # 2. Filter out any install-time requirements
    # 3. Query which packages are being used to satisfy the requirements
    # 4. Keep just their package names
    # 5. Remove packages that are on the disallow list
    # 6. Store result as an allowlist
    <keep xargs rpm -r "$rootfs" -q --requires | sort -Vu | cut -d ' ' -f1 \
        | grep -v -e '^rpmlib(' \
        | xargs -d $'\n' rpm -r "$rootfs" -q --whatprovides \
        | grep -v -e '^no package provides' \
        | sed -r 's/^(.*)-.*-.*$/\1/' \
        | grep -vxF -f disallow  \
        > new || true

    # Safely replace the keep list, appending the new names
    mv keep old
    cat old new > keep
    # Sort and deduplicate so cmp will eventually return true
    sort -u keep -o keep
done

# Determine all packages that need to be removed
rpm -r "$rootfs" -qa | sed -r 's/^(.*)-.*-.*$/\1/' | sort -u > all
# Set complement (all - keep)
grep -vxF -f keep all > remove

echo "==> $(wc -l remove | cut -d ' ' -f1) packages to erase:" >&2
cat remove
echo "==> $(wc -l keep | cut -d ' ' -f1) packages to keep:" >&2
cat keep
echo "" >&2

echo "==> Erasing packages" >&2
# Delete all packages that aren't needed for the core packages
set -x
<remove xargs rpm -r "$rootfs" --erase --nodeps --allmatches
{ set +x; } 2>/dev/null


# AGGRESSIVE cleanup - remove all non-essential files
echo "==> Aggressive cleanup" >&2
rm -rf "$rootfs"/usr/share/{man,doc,info,groff,lintian,i18n,locale}
rm -rf "$rootfs"/usr/share/locale/*
rm -rf "$rootfs"/usr/lib/locale/*
rm -rf "$rootfs"/usr/share/zoneinfo/*
rm -rf "$rootfs"/var/cache/*
#rm -rf "$rootfs"/var/log/*
rm -rf "$rootfs"/var/lib/dnf/*
rm -rf "$rootfs"/tmp/*
rm -rf "$rootfs"/usr/lib/firmware
rm -rf "$rootfs"/usr/lib/modules
rm -rf "$rootfs"/boot
rm -rf "$rootfs"/media
rm -rf "$rootfs"/mnt
rm -rf "$rootfs"/opt
rm -rf "$rootfs"/srv
rm -rf "$rootfs"/usr/games
rm -rf "$rootfs"/usr/include
rm -rf "$rootfs"/usr/src
rm -rf "$rootfs"/usr/share/bash-completion
rm -rf "$rootfs"/var/lib/rpm/rpmdb*


# Remove static libraries
find "$rootfs"/usr/lib64 -name "*.a" -delete 2>/dev/null || true && \

find "$rootfs"/usr/share/zoneinfo -type f ! -name 'UTC' -delete 2>/dev/null || true && \
# Strip binaries
find "$rootfs"/usr/bin "$rootfs"/usr/sbin "$rootfs"/usr/lib* -type f -executable -exec strip --strip-unneeded {} \; 2>/dev/null || true
find "$rootfs"/usr/lib* -type f -name "*.so*" -exec strip --strip-unneeded {} \; 2>/dev/null || true

echo "" >&2
echo "==> Packages erased ok!" >&2

echo "==> Importing RPM-GPG-KEY-redhat-release!" >&2
# Import all GPG keys into the chroot
for key in /etc/pki/rpm-gpg/*; do
    rpm --root="$rootfs" --import "$key" || echo "Failed to import $key, skipping."
done

echo "==> Importing Redhat GPG key successful" >&2

rpm --root "$rootfs" --rebuilddb