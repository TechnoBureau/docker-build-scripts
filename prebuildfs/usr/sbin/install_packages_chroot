#!/bin/bash

set -euo pipefail
#set -x

# Unified script: optional release version (default 9). Accepts:
#   install_packages_chroot 10 pkg1 pkg2 ...
#   install_packages_chroot -r 10 pkg1 ...
#   install_packages_chroot --releasever=10 pkg1 ...
# If no version provided, defaults to 9.

releasever=9

# Parse optional release version
if [ "$#" -gt 0 ]; then
	# support --releasever=10
	case "$1" in
		--releasever=*)
			releasever="${1#*=}"
			shift
			;;
		-r|--releasever)
			if [ "$#" -lt 2 ]; then
				echo "Missing value for $1" >&2
				exit 2
			fi
			releasever="$2"
			shift 2
			;;
		[0-9]*)
			# first arg is numeric -> treat as releasever
			releasever="$1"
			shift
			;;
		*)
			# no release specified; keep default
			;;
	esac
fi

dir="/tmp/null"
rm -rf "$dir"
mkdir "$dir"
cd "$dir"

# Add all remaining arguments as the initial core packages
printf '%s\n' "$@" > keep
# Packages required for a shell environment
cat >>keep <<EOF
EOF

# Packages that are not needed in the chroot environment.  Disallow list to block certain packages and their dependencies from being installed and very careful to add into this list where it will find those dependencies as well to be removed.

cat >disallow <<EOF
alsa-lib
copy-jdk-configs
cups-libs
chkconfig
info
platform-python
platform-python-setuptools
python3
python3-libs
python3-pip-wheel
python3-setuptools-wheel
p11-kit
systemd
tzdata
alternatives
coreutils-single
bash
libselinux
libsemanage
libsepol
shadow-utils
sed
redhat-release
grep
EOF

sort -u keep -o keep

echo "==> Installing packages into chroot (releasever=$releasever)" >&2

set -x
# Install requirements for this script (xargs and cmp)
dnf install -y findutils diffutils
# Install core packages to chroot
rootfs="$(realpath rootfs)"
mkdir -p "$rootfs"
<keep xargs dnf install -y --installroot "$rootfs" --releasever "$releasever" --setopt install_weak_deps=false --nodocs
dnf --installroot "$rootfs" clean all
rm -rf "$rootfs"/var/cache/* "$rootfs"/var/log/dnf* "$rootfs"/var/log/yum.*
{ set +x; } 2>/dev/null

echo "==> Building dependency tree" >&2
# Loop until we have the full dependency tree (no new packages found)
touch old
while ! cmp -s keep old
do
    # 1. Get requirement names (not quite the same as package names)
    # 2. Filter out any install-time requirements
    # 3. Query which packages are being used to satisfy the requirements
    # 4. Keep just their package names
    # 5. Remove packages that are on the disallow list
    # 6. Store result as an allowlist
    <keep xargs rpm -r "$rootfs" -q --requires | sort -Vu | cut -d ' ' -f1 \
        | grep -v -e '^rpmlib(' \
        | xargs -d $'\n' rpm -r "$rootfs" -q --whatprovides \
        | grep -v -e '^no package provides' \
        | sed -r 's/^(.*)-.*-.*$/\1/' \
        | grep -vxF -f disallow  \
        > new || true

    # Safely replace the keep list, appending the new names
    mv keep old
    cat old new > keep
    # Sort and deduplicate so cmp will eventually return true
    sort -u keep -o keep
done

# Determine all packages that need to be removed
rpm -r "$rootfs" -qa | sed -r 's/^(.*)-.*-.*$/\1/' | sort -u > all
# Set complement (all - keep)
grep -vxF -f keep all > remove

echo "==> $(wc -l remove | cut -d ' ' -f1) packages to erase:" >&2
cat remove
echo "==> $(wc -l keep | cut -d ' ' -f1) packages to keep:" >&2
cat keep
echo "" >&2

echo "==> Erasing packages" >&2
# Delete all packages that aren't needed for the core packages
set -x
<remove xargs rpm -r "$rootfs" --erase --nodeps --allmatches
{ set +x; } 2>/dev/null

echo "" >&2
echo "==> Packages erased ok!" >&2

echo "==> Importing RPM-GPG-KEY-redhat-release!" >&2
# Import all GPG keys into the chroot
for key in /etc/pki/rpm-gpg/*; do
    rpm --root="$rootfs" --import "$key" || echo "Failed to import $key, skipping."
done

echo "==> Importing Redhat GPG key successful" >&2
